package task_01;

import java.util.concurrent.*;

public class Main1 {
    public static void main(String[] args) {

        // Отдать исполнителю задачу, вычисляющую 2 + 3.
        // Создать объект Future, в которой в итоге должен быть размещён результат.
        // Получить решение из объекта Future и вывести его в консоль.
        // Продемонстрировать ожидание результата с таймаутом.

//        Runnable runnable = () -> {
//            System.out.println("Эта строка отработала в другом потоке");
//            System.out.println("Эта строка отработала в другом потоке");
//            System.out.println("Эта строка отработала в другом потоке");
//        };
//        new Thread(runnable).start();

        // Здесь мы определяем задачу, которая должна быть выполнена
        Callable<Integer> task = () -> {
            int x = 2;
            int y = 3;
            // Здесь мы имитируем, что реальная задача выполняется какое-то время
            Thread.sleep(10_000);
            int result = x + y;
            return result;
        };

        // Здесь мы создаём пул потоков, который и будет выполнять наши задачи
        ExecutorService service = Executors.newSingleThreadExecutor();

        // Здесь мы обращаемся к пулу потоков и отдаём ему задачу на выполнение.
        // При этом мы получаем объект Future, который в будущем будет содержать
        // решение задачи после того, как она будет выполнена.
        System.out.println("Главный поток передал задачу на выполнение");
        Future<Integer> box = service.submit(task);

        // Здесь мы имитируем ситуацию, что главный поток, после того, как он отдал
        // задачу на выполнение другому потоку, выполняет какие-то другие свои
        // инструкции, не относящиеся к переданной задаче (делает это 5 секунд)
        System.out.println("Главный поток занимается своими делами 5 секунд.");
        try {
            Thread.sleep(5_000);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        // Здесь главный поток пытается получить решение задачи.
        try {
//            System.out.println("Главный поток ожидает результата");

            // Когда мы вызываем метод get без параметров, то программа
            // будет ждать до тех пор, пока результат не будет вычислен.
//            int result = box.get();

            // Когда мы вызываем метод get с таймаутом, то программа
            // будет ждать только в течение этого таймаута.
            // Если за это время результат не будет вычислен,
            // то программа больше ждать не будет и пойдёт выполнять дальнейший код.
            System.out.println("Главный поток ожидает результата 3 секунды");
            int result = box.get(3, TimeUnit.SECONDS);

            System.out.println("Полученный результат - " + result);
        } catch (Exception e) {
            System.out.println("Получение решения при данных условиях невозможно.");
        }

        service.shutdown();
    }
}
